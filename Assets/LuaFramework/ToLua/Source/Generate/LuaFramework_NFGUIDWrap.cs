//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_NFGUIDWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.NFGUID), typeof(System.Object));
		L.RegFunction("Equals", Equals);
		L.RegFunction("IsNull", IsNull);
		L.RegFunction("ToString", ToString);
		L.RegFunction("Parse", Parse);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("New", _CreateLuaFramework_NFGUID);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("nHead64", get_nHead64, set_nHead64);
		L.RegVar("nData64", get_nData64, set_nData64);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaFramework_NFGUID(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaFramework.NFGUID obj = new LuaFramework.NFGUID();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(LuaFramework.NFGUID)))
			{
				LuaFramework.NFGUID arg0 = (LuaFramework.NFGUID)ToLua.CheckObject(L, 1, typeof(LuaFramework.NFGUID));
				LuaFramework.NFGUID obj = new LuaFramework.NFGUID(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(long), typeof(long)))
			{
				long arg0 = LuaDLL.tolua_checkint64(L, 1);
				long arg1 = LuaDLL.tolua_checkint64(L, 2);
				LuaFramework.NFGUID obj = new LuaFramework.NFGUID(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaFramework.NFGUID.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)ToLua.CheckObject(L, 1, typeof(LuaFramework.NFGUID));
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsNull(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)ToLua.CheckObject(L, 1, typeof(LuaFramework.NFGUID));
			bool o = obj.IsNull();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)ToLua.CheckObject(L, 1, typeof(LuaFramework.NFGUID));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)ToLua.CheckObject(L, 1, typeof(LuaFramework.NFGUID));
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.NFGUID arg1 = null;
			bool o = obj.Parse(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushObject(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)ToLua.CheckObject(L, 1, typeof(LuaFramework.NFGUID));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.NFGUID arg0 = (LuaFramework.NFGUID)ToLua.ToObject(L, 1);
			LuaFramework.NFGUID arg1 = (LuaFramework.NFGUID)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nHead64(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)o;
			long ret = obj.nHead64;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nHead64 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nData64(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)o;
			long ret = obj.nData64;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nData64 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nHead64(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.nHead64 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nHead64 on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nData64(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaFramework.NFGUID obj = (LuaFramework.NFGUID)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.nData64 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nData64 on a nil value" : e.Message);
		}
	}
}

