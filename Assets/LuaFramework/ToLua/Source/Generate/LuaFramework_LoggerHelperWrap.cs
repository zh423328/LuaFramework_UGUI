//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_LoggerHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.LoggerHelper), typeof(System.Object));
		L.RegFunction("Release", Release);
		L.RegFunction("UploadLogFile", UploadLogFile);
		L.RegFunction("Debug", Debug);
		L.RegFunction("Info", Info);
		L.RegFunction("Warning", Warning);
		L.RegFunction("Error", Error);
		L.RegFunction("Critical", Critical);
		L.RegFunction("Except", Except);
		L.RegFunction("New", _CreateLuaFramework_LoggerHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CurrentLogLevels", get_CurrentLogLevels, set_CurrentLogLevels);
		L.RegVar("mWriteLevels", get_mWriteLevels, set_mWriteLevels);
		L.RegVar("DebugFilterStr", get_DebugFilterStr, set_DebugFilterStr);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaFramework_LoggerHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaFramework.LoggerHelper obj = new LuaFramework.LoggerHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaFramework.LoggerHelper.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LuaFramework.LoggerHelper.Release();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UploadLogFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LuaFramework.LoggerHelper.UploadLogFile();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Debug(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(object)))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				LuaFramework.LoggerHelper.Debug(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(object)))
			{
				string arg0 = ToLua.ToString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				LuaFramework.LoggerHelper.Debug(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.LoggerHelper.Debug");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Info(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			LuaFramework.LoggerHelper.Info(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Warning(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			LuaFramework.LoggerHelper.Warning(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Error(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			LuaFramework.LoggerHelper.Error(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Critical(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			object arg0 = ToLua.ToVarObject(L, 1);
			LuaFramework.LoggerHelper.Critical(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Except(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Exception arg0 = (System.Exception)ToLua.CheckObject(L, 1, typeof(System.Exception));
			object arg1 = ToLua.ToVarObject(L, 2);
			LuaFramework.LoggerHelper.Except(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentLogLevels(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.LoggerHelper.CurrentLogLevels);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mWriteLevels(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.LoggerHelper.mWriteLevels);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DebugFilterStr(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, LuaFramework.LoggerHelper.DebugFilterStr);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurrentLogLevels(IntPtr L)
	{
		try
		{
			LuaFramework.LogLevel arg0 = (LuaFramework.LogLevel)ToLua.CheckObject(L, 2, typeof(LuaFramework.LogLevel));
			LuaFramework.LoggerHelper.CurrentLogLevels = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mWriteLevels(IntPtr L)
	{
		try
		{
			LuaFramework.LogLevel arg0 = (LuaFramework.LogLevel)ToLua.CheckObject(L, 2, typeof(LuaFramework.LogLevel));
			LuaFramework.LoggerHelper.mWriteLevels = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DebugFilterStr(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			LuaFramework.LoggerHelper.DebugFilterStr = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

